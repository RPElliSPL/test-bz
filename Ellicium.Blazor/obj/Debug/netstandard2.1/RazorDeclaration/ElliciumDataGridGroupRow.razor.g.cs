// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataGridGroupRow.razor"
using System.Linq.Dynamic.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataGridGroupRow.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
    public partial class ElliciumDataGridGroupRow<
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataGridGroupRow.razor"
TItem

#line default
#line hidden
#nullable disable
    > : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 67 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataGridGroupRow.razor"
       
    string GetKeyAsString()
    {
        var value = !string.IsNullOrEmpty(Group.GroupDescriptor.FormatString) ?
            string.Format(Grid?.Culture ?? CultureInfo.CurrentCulture, Group.GroupDescriptor.FormatString, Group.Data.Key) :
                Convert.ToString(Group.Data.Key, Grid?.Culture ?? CultureInfo.CurrentCulture);
        return $"{value}";
    }

    [Parameter]
    public IList<ElliciumDataGridColumn<TItem>> Columns { get; set; }

    GroupResult _groupResult;
    [Parameter]
    public GroupResult GroupResult 
    { 
        get
        {
            return _groupResult;
        }
        set
        {
            if(_groupResult != value)
            {
                _groupResult = value;

                var level = GetLevel();
                Group = new Group()
                    {
                        Level = level,
                        GroupDescriptor = Grid.Groups?.ElementAtOrDefault(level),
                        Data = _groupResult
                    };
            }
        }
    }


    private int TotalColumnCount
    {
        get
        {
             var columnsOfGrid = Columns
                   .Where(c => c.GetVisible())
                   .ToList();
            return columnsOfGrid.Sum(c => CountVisibleLeafColumns<TItem>(c));
            }
        }

        [Parameter]
        public ElliciumDataGrid<TItem> Grid { get; set; }

        [Parameter]
        public ElliciumDataGridGroupRow<TItem> Parent { get; set; }

        [Parameter]
        public Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder Builder { get; set; }

        RenderFragment DrawDataRows(bool groupFootersOnly = false)
        {
            return new RenderFragment(builder =>
            {
                if(GroupResult.Subgroups != null)
                {
                    foreach(var g in GroupResult.Subgroups)
                    {
                        builder.OpenComponent(0, typeof(ElliciumDataGridGroupRow<TItem>));
                        builder.AddAttribute(1, "Columns", Columns);
                        builder.AddAttribute(3, "Grid", Grid);
                        builder.AddAttribute(3, "Parent", this);
                        builder.AddAttribute(5, "GroupResult", g);
                        builder.AddAttribute(6, "Builder", builder);
                        builder.CloseComponent();
                    }
                }
                else
                {
                    if(!groupFootersOnly)
                    {
                        int i = 0;
                        foreach(var item in GroupResult.Items)
                        {
                            builder.OpenComponent(0, typeof(ElliciumDataGridRow<TItem>));
                            builder.AddAttribute(1, "Columns", Columns);
                            builder.AddAttribute(2, "Index", i);
                            builder.AddAttribute(3, "Grid", Grid);
                            builder.AddAttribute(4, "TItem", typeof(TItem));
                            builder.AddAttribute(5, "Item", item);
                            builder.AddAttribute(6, "InEditMode", Grid.IsRowInEditMode((TItem)item));

                            if (Grid.editContexts.ContainsKey((TItem)item))
                            {
                                builder.AddAttribute(7, nameof(ElliciumDataGridRow<TItem>.EditContext), Grid.editContexts[(TItem)item]);
                            }

                            builder.CloseComponent();
                            i++;
                        }
                    }

                    if (Columns.Where(c => c.GroupFooterTemplate != null).Any())
                    {
                        builder.OpenComponent(7, typeof(ElliciumDataGridGroupFooterRow<TItem>));
                        builder.AddAttribute(8, "Columns", Columns);
                        builder.AddAttribute(9, "Grid", Grid);
                        builder.AddAttribute(10, "GroupResult", GroupResult);
                        builder.AddAttribute(11, "Builder", builder);
                        builder.AddAttribute(12, "Parent", this);
                        builder.CloseComponent();
                    }
                }
            });
        }

        public Group Group { get; set; }

        int GetLevel()
        {
            int i = 0;
            var p = Parent;
            while(p != null)
            {
                p = p.Parent;
                i++;
            }

            return i;
        }

    private int CountVisibleLeafColumns<T>(ElliciumDataGridColumn<TItem> column)
    {
        if (column.ColumnsCollection?.Count == 0)
        {
            return column.GetVisible()  ? 1 : 0;
        }

        int count = 0;
        foreach (var childColumn in column.ColumnsCollection)
        {
            count += CountVisibleLeafColumns<T>(childColumn);
        }
        return count;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
