// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Radzen.Blazor\RadzenDataGridHeaderCell.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Radzen.Blazor\RadzenDataGridHeaderCell.razor"
using Ellicium.Blazor.Rendering;

#line default
#line hidden
#nullable disable
    public partial class RadzenDataGridHeaderCell<
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Radzen.Blazor\RadzenDataGridHeaderCell.razor"
TItem

#line default
#line hidden
#nullable disable
    > : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 165 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Radzen.Blazor\RadzenDataGridHeaderCell.razor"
       
    Ellicium.Blazor.Rendering.Popup popup;
    ElementReference filterButton;

    string getFilterOpen()
    {
        return Grid.FilterPopupRenderMode == PopupRenderMode.Initial ? $"Ellicium.togglePopup(this, '{getColumnPopupID()}', false, null, null, true, true)" : "";
    }

    async Task ToggleFilter()
    {
        if (Grid.FilterPopupRenderMode == PopupRenderMode.OnDemand)
        {
            await popup.ToggleAsync(filterButton);
        }
    }

    async Task ClearFilter()
    {
        if (Grid.FilterPopupRenderMode == PopupRenderMode.OnDemand)
        {
            await popup.CloseAsync();
        }
        await Grid.ClearFilter(Column, true);
    }

    async Task ApplyFilter()
    {
        if (Grid.FilterPopupRenderMode == PopupRenderMode.OnDemand)
        {
            await popup.CloseAsync();
        }
        await Grid.ApplyFilter(Column, true);
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> Attributes { get; set; }

    [Parameter]
    public ElliciumDataGridColumn<TItem> Column { get; set; }

    [Parameter]
    public int ColumnIndex { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public ElliciumDataGrid<TItem> Grid { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string Style { get; set; }

    private string GetStyle()
    {
        var styles = (new List<string>() { Column.GetStyle(true, true), Style }).Distinct().ToList();

        if (Attributes?.TryGetValue("style", out var styleAttribute) == true)
        {
            styles.Add(Convert.ToString(styleAttribute));
        }

        var finalStyle = string.Join(";",
                styles
                .Select(x => x?.Trim().TrimEnd(';'))
                .Where(x => !string.IsNullOrEmpty(x))
            );

        return finalStyle;
    }

    private string getFilterIconCss(ElliciumDataGridColumn<TItem> column)
    {
        var additionalStyle = Column.HasActiveFilter() ? "elli-grid-filter-active" : "";
        return $"rzi elli-grid-filter-icon {additionalStyle}";
    }

    private Task OnSortKeyPressed(KeyboardEventArgs args)
    {
        var key = args.Code ?? args.Key;
        if (key == "Enter")
        {
            return Grid.OnSort(args, Column);
        }
        return Task.CompletedTask;
    }

    string getColumnPopupID()
    {
        var fiterProperty = Column.GetFilterProperty();

        return $"{Grid.PopupID}{(string.IsNullOrEmpty(fiterProperty) ? Grid.allColumns.IndexOf(Column).ToString() : fiterProperty)}";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Column != null)
        {
            Column.headerCell = this;
        }
    }

    internal async Task CloseFilter()
    {
        if (popup != null)
        {
            await popup.CloseAsync(filterButton);
        }
    }

    async Task StartColumnResize(MouseEventArgs args)
    {
        if(args.Button == 0) 
        { 
            await Grid.StartColumnResize(args, ColumnIndex);
        }
    }

    async Task StopColumnResize(MouseEventArgs args)
    {
        if (args.Button == 0)
        {
            await Grid.StopColumnResize(args, ColumnIndex);
        }
    }

    internal async Task OpenFilter()
    {
        if (Grid.FilterPopupRenderMode == PopupRenderMode.OnDemand)
        {
            await popup.ToggleAsync(filterButton);
        }
        else
        {
            await Grid.GetJSRuntime().InvokeVoidAsync("Ellicium.togglePopup", filterButton, getColumnPopupID(), false, null, null, true, true);
        }
    }

    async Task OnFilterPopupKeyPressed(KeyboardEventArgs args)
    {
        var key = args.Code ?? args.Key;
        if (key == "Escape")
        {
            await CloseFilter();
            await Grid.GetJSRuntime().InvokeVoidAsync("Ellicium.focusElement", Grid.GridId());
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
