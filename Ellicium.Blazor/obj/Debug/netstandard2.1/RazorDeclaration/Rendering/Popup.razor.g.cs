// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor.Rendering
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\Rendering\Popup.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
    public partial class Popup : ElliciumComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 9 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\Rendering\Popup.razor"
       
    bool open;

    [Parameter]
    public bool Lazy { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool PreventDefault { get; set; }

    [Parameter]
    public EventCallback Open { get; set; }

    [Parameter]
    public EventCallback Close { get; set; }

    public async Task ToggleAsync(ElementReference target)
    {
        open = !open;
        this.target = target;

        if (open)
        {
            await Open.InvokeAsync(null);
            await JSRuntime.InvokeVoidAsync("Ellicium.openPopup", target, GetId(), false, null, null, null, Reference, nameof(OnClose), true, true);
        }
        else
        {
            await CloseAsync();
        }
    }

    public async Task CloseAsync(ElementReference target)
    {
        open = false;
        this.target = target;

        await CloseAsync();
    }

    ElementReference target;

    [JSInvokable]
    public async Task OnClose()
    {
        open = false;

        await Close.InvokeAsync(null);
    }

    public async Task CloseAsync()
    {
        await JSRuntime.InvokeVoidAsync("Ellicium.closePopup", GetId(), Reference, nameof(OnClose));
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
