// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor.Rendering
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\Path.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    public partial class Path : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 3 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\Path.razor"
       
    [Parameter]
    public string Style { get; set; }

    private string CurrentStyle()
    {
        var style = new StringBuilder();

        if (Stroke != null)
        {
            style.Append($"stroke: {Stroke};");
        }

        if (Fill != null)
        {
            style.Append($"fill: {Fill};");
        }

        if (StrokeWidth >= 0)
        {
            style.Append($"stroke-width: {StrokeWidth.ToInvariantString()};");
        }

        if (!string.IsNullOrEmpty(Style))
        {
            if (style.Length > 0)
            {
                style.Append(";");
            }
            style.Append(Style);
        }

        return style.ToString();
    }

    [Parameter]
    public string D { get; set; }

    [Parameter]
    public string Stroke { get; set; }

    [Parameter]
    public string Fill { get; set; }

    [Parameter]
    public double StrokeWidth { get; set; }

    [Parameter]
    public LineType LineType { get; set; }

    [Parameter]
    public string Class { get; set;}

    private string StrokeLineCap
    {
        get
        {
            switch (LineType)
            {
                case LineType.Dotted:
                return "round";
                default:
                return null;
            }
        }
    }

    private string StrokeDashArray
    {
        get
        {
            switch (LineType)
            {
                case LineType.Dotted:
                return $"0 {StrokeWidth * 2}";
                case LineType.Dashed:
                return $"{StrokeWidth * 3} {StrokeWidth * 3}";
                default:
                return null;
            }
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
