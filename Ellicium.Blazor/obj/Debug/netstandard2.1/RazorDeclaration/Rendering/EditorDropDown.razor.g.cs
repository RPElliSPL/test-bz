// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor.Rendering
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\Rendering\EditorDropDown.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
    public partial class EditorDropDown : ElliciumComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 21 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\Rendering\EditorDropDown.razor"
       
    [CascadingParameter]
    public ElliciumHtmlEditor Editor { get; set; }

    Popup Popup { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string PopupStyle { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public HtmlEditorMode EnabledModes { get; set; } = HtmlEditorMode.Design;

    async Task Toggle()
    {
        if (!Editor.Disabled && EnabledModes.HasFlag(Editor.GetMode()))
        {
            await Popup.ToggleAsync(Element);
        }
    }

    [Parameter]
    public string Value { get; set; }

    internal EditorDropDownItem SelectedItem { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> Change { get; set; }

    internal async Task Select(EditorDropDownItem item, bool change)
    {
        if (SelectedItem != item && !Editor.Disabled && EnabledModes.HasFlag(Editor.GetMode()))
        {
            SelectedItem = item;

            if (change)
            {
                await Popup.CloseAsync();
                await ValueChanged.InvokeAsync(item?.Value);
                await Change.InvokeAsync(item?.Value);
            }

            StateHasChanged();
        }
    }

    string Class
    {
        get
        {
            var classList = new List<string>() { "rz-html-editor-dropdown" };

            if (Editor.Disabled || !EnabledModes.HasFlag(Editor.GetMode()))
            {
                classList.Add("rz-disabled");
            }

            return string.Join(" ", classList);
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
