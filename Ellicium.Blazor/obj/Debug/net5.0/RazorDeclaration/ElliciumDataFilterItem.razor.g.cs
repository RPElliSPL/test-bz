// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    public partial class ElliciumDataFilterItem<
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataFilterItem.razor"
TItem

#line default
#line hidden
#nullable disable
    > : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 77 "C:\Users\Rishabh_Patil\source\repos\Rishabh\Blazor-test-bz\test-bz\Ellicium.Blazor\ElliciumDataFilterItem.razor"
       
    [Parameter]
    public ElliciumDataFilter<TItem> DataFilter { get; set; }

    [Parameter]
    public ElliciumDataFilterItem<TItem> Parent { get; set; }

    CompositeFilterDescriptor _filter;
    [Parameter]
    public CompositeFilterDescriptor Filter
    {
        get
        {
            return _filter;
        }
        set
        {
            _filter = value;

            if (property == null && Filter.Filters == null)
            {
                if (Filter.Property != null)
	            {
		            property = DataFilter?.properties.FirstOrDefault(f => object.Equals(f.Property, Filter.Property)); 
	            }
                else if (property == null && DataFilter?.UniqueFilters == true)
                {
                    property = DataFilter?.properties.FirstOrDefault(f => f.IsSelected == false);
                }
                else
                {
                    property = DataFilter?.properties.FirstOrDefault();
                }

                if (property != null)
                {
                    property.FilterValueChange -= OnFilterValueChange;
                    property.FilterValueChange += OnFilterValueChange;
                    
	                if (DataFilter?.UniqueFilters == true)
                    {
                        property.IsSelected = true;
                    }
                    
	                Filter.Property = property.Property;

                    if (Filter.FilterOperator == null)
                    {
                        Filter.FilterOperator = property.GetFilterOperator();
                    }
                    
                    else if (!property.GetFilterOperators().Contains(Filter.FilterOperator.Value))
                    {
                        Filter.FilterOperator = property.GetFilterOperators().FirstOrDefault();
                    }

                    var v = property.GetFilterValue();
                    if (v != null)
                    {
                        Filter.FilterValue = v;
                    }
                }
            }
        }
    }

    void OnFilterValueChange(object value)
    {
        if (property != null)
        {
            Filter.FilterValue = property.GetFilterValue();
        }
    }

    ElliciumDataFilterProperty<TItem> property;

    async Task ApplyFilter()
    {
        if (DataFilter.Auto)
        {
            await DataFilter.Filter();
        }
    }

    async Task OnPropertyChange(object p)
    {
        property.FilterValueChange -= OnFilterValueChange;
        property.IsSelected = false;

        property = DataFilter.properties.Where(c => object.Equals(c.Property, p)).FirstOrDefault();

        property.FilterValueChange += OnFilterValueChange;
        if (DataFilter?.UniqueFilters == true)
        {
            property.IsSelected = true;
        }
        Filter.FilterValue = null;

        var defaultOperator = typeof(System.Collections.IEnumerable).IsAssignableFrom(property.FilterPropertyType) ? FilterOperator.Contains : default(FilterOperator);
	    
	    if (property.GetFilterOperators().Any(o => o == property.FilterOperator))
	    {
		    Filter.FilterOperator = property.FilterOperator;
	    }
	    else if (property.GetFilterOperators().Contains(defaultOperator))
	    {
		    Filter.FilterOperator = defaultOperator;
	    }
	    else
	    {
		    Filter.FilterOperator = property.GetFilterOperators().FirstOrDefault();
	    }

        await ApplyFilter();
    }

    bool IsOperatorNullOrEmpty()
    {
        if (Filter != null)
        {
            return Filter.FilterOperator == FilterOperator.IsEmpty ||  Filter.FilterOperator == FilterOperator.IsNotEmpty ||
                    Filter.FilterOperator == FilterOperator.IsNull || Filter.FilterOperator == FilterOperator.IsNotNull;
        }

        return false;
    }

    async Task OnOperatorChange(object p)
    {
        if (IsOperatorNullOrEmpty())
        {
            Filter.FilterValue = null;
        }

        await ApplyFilter();
    }

    async Task AddFilter(bool isGroup)
    {
        if (DataFilter?.UniqueFilters == true && DataFilter.properties.All(f => f.IsSelected))
        {
            return;
        }
        if (isGroup)
        {
            Filter.Filters = Filter.Filters.Concat(new CompositeFilterDescriptor[]
                {
                    new CompositeFilterDescriptor()
                    {
                        Filters = Enumerable.Empty<CompositeFilterDescriptor>()
                    }
                }
            );
        }
        else
        {
            Filter.Filters = Filter.Filters.Concat(new CompositeFilterDescriptor[] { new CompositeFilterDescriptor() });
        }

        if (DataFilter.Auto)
        {
            await DataFilter.Filter();
        }
    }

    async Task RemoveFilter()
    {
        if (property != null)
        {
            property.IsSelected = false;
        }
        property = null;

        if (Parent != null)
        {
            Parent.Filter.Filters = Parent.Filter.Filters.Where(f => f != Filter).ToList();
            await Parent.ChangeState();
        }
        else
        {
            DataFilter.Filters = DataFilter.Filters.Where(f => f != Filter).ToList();
            await DataFilter.ChangeState();
        }

        await ApplyFilter();
    }

    internal async Task ChangeState()
    {
        await InvokeAsync(StateHasChanged);
    }

    RenderFragment DrawNumericFilter()
    {
        return new RenderFragment(builder =>
        {
            var type = Nullable.GetUnderlyingType(property.FilterPropertyType) != null ?
                property.FilterPropertyType : typeof(Nullable<>).MakeGenericType(property.FilterPropertyType);

            var numericType = typeof(ElliciumNumeric<>).MakeGenericType(type);

            builder.OpenComponent(0, numericType);

            builder.AddAttribute(1, "Value", Filter.FilterValue);
            builder.AddAttribute(2, "class", "rz-datafilter-editor");
            builder.AddAttribute(3, "Disabled", IsOperatorNullOrEmpty());

            Action<object> action = args =>
            {
                Filter.FilterValue = args; InvokeAsync(ApplyFilter);
            };

            var eventCallbackGenericCreate = typeof(NumericFilterEventCallback).GetMethod("Create").MakeGenericMethod(type);
            var eventCallbackGenericAction = typeof(NumericFilterEventCallback).GetMethod("Action").MakeGenericMethod(type);

            builder.AddAttribute(3, "Change", eventCallbackGenericCreate.Invoke(this,
                new object[] { this, eventCallbackGenericAction.Invoke(this, new object[] { action }) }));

            builder.CloseComponent();
        });
    }

    internal class NumericFilterEventCallback
    {
        public static EventCallback<T> Create<T>(object receiver, Action<T> action)
        {
            return EventCallback.Factory.Create<T>(receiver, action);
        }

        public static Action<T> Action<T>(Action<object> action)
        {
            return args => action(args);
        }
    }

    internal string getFilterDateFormat()
    {
        if (property != null && !string.IsNullOrEmpty(property.FormatString))
        {
            return property.FormatString.Replace("{0:", "").Replace("}", "");
        }

        return DataFilter.FilterDateFormat;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
