// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor.Rendering
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    public partial class Markers<
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\Markers.razor"
TItem

#line default
#line hidden
#nullable disable
    > : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 14 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\Markers.razor"
       
    [CascadingParameter]
    public ElliciumChart Chart { get; set;}

    [Parameter]
    public IChartSeries Series { get; set; }

    private async Task OnClick(TItem data)
    {
        await Series.InvokeClick(Chart.SeriesClick, data);
    }

    [Parameter]
    public IEnumerable<Point<TItem>> Data { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public MarkerType MarkerType { get; set; }

    [Parameter]
    public string Stroke { get; set; }

    [Parameter]
    public string Fill { get; set; }

    [Parameter]
    public double StrokeWidth { get; set; }

    [Parameter]
    public double Size { get; set; }

    private double x1;
    private double x2;

    private double y1;
    private double y2;

    private bool InPlotArea(double x, double y)
    {
        return x >= x1 && x <= x2 && y >= y1 && y <= y2;
    }

    protected override void OnParametersSet()
    {
        var categoryTicks = Chart.CategoryScale.Ticks(Chart.CategoryAxis.TickDistance);

        x1 = Chart.CategoryScale.Scale(categoryTicks.Start);
        x2 = Chart.CategoryScale.Scale(categoryTicks.End);

        var valueTicks = Chart.ValueScale.Ticks(Chart.ValueAxis.TickDistance);

        y1 = Chart.ValueScale.Scale(valueTicks.End);
        y2 = Chart.ValueScale.Scale(valueTicks.Start);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
