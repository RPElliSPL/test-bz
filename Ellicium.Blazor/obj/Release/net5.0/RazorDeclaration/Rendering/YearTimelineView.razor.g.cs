// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Ellicium.Blazor.Rendering
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
using Ellicium;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
using Ellicium.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
using Ellicium.Blazor.Rendering;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
    public partial class YearTimelineView : DropableViewBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 132 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
       
    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public DateTime EndDate { get; set; }

    [Parameter]
    public Month StartMonth { get; set; }

    [Parameter]
    public int MaxAppointmentsInSlot { get; set; }

    [Parameter]
    public string MoreText { get; set; }

    [CascadingParameter]
    public IScheduler Scheduler { get; set; }

    [Parameter]
    public IEnumerable<AppointmentData> Appointments { get; set; }

    IDictionary<string, object> Attributes(DateTime start, string className, bool slotInMonth)
    {
        var attributes = Scheduler.GetSlotAttributes(start, start.AddDays(1));
        attributes["class"] = ClassList.Create(className).Add(attributes).ToString();
        attributes["dropzone"] = "move";
        if (!slotInMonth)
        {
            attributes.Remove("style");
        }
        return attributes;
    }

    async Task OnSlotClick(DateTime date)
    {
        await Scheduler.SelectSlot(date, date.AddDays(1), AppointmentsInSlot(date, date.AddDays(1)));
    }

    double DetermineTop(HashSet<double> existingTops)
    {
        var top = 1.5;

        while (existingTops.Contains(top))
        {
            top += 1.5;
        }

        return top;
    }

    HashSet<double> ExistingTops(IDictionary<AppointmentData, double> tops, IEnumerable<AppointmentData> appointments)
    {
        var existingTops = new HashSet<double>();

        foreach (var appointment in appointments)
        {
            if (tops.TryGetValue(appointment, out var existingTop))
            {
                existingTops.Add(existingTop);
            }
        }

        return existingTops;
    }

    async Task OnAppointmentClick(AppointmentData data)
    {
        await Scheduler.SelectAppointment(data);
    }

    private AppointmentData[] AppointmentsInSlot(DateTime start, DateTime end)
    {
        if (Appointments == null)
        {
            return Array.Empty<AppointmentData>();
        }

        return Appointments.Where(item => Scheduler.IsAppointmentInRange(item, start, end)).OrderBy(item => item.Start).ThenByDescending(item => item.End).ToArray();
    }

    async Task OnListClick(DateTime date, IEnumerable<AppointmentData> appointments)
    {
        bool preventDefault = await Scheduler.SelectMore(date, date.AddDays(1), appointments);

        if (!preventDefault)
        {
        await DialogService.OpenAsync(date.ToShortDateString(), ds =>
    

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.OpenElement(0, "div");
            __builder2.AddAttribute(1, "class", "rz-event-list");
            __builder2.AddMarkupContent(2, "\n        ");
            __builder2.OpenElement(3, "CascadingValue");
            __builder2.AddAttribute(4, "Value", 
#nullable restore
#line 221 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
                               Scheduler

#line default
#line hidden
#nullable disable
            );
            __builder2.AddMarkupContent(5, "\n");
#nullable restore
#line 222 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
             foreach (var item in appointments)
            {

#line default
#line hidden
#nullable disable
            __builder2.AddContent(6, "                ");
            __builder2.OpenElement(7, "Appointment");
            __builder2.AddAttribute(8, "Data", 
#nullable restore
#line 224 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
                                   item

#line default
#line hidden
#nullable disable
            );
            __builder2.AddAttribute(9, "Click", "OnListEventClick");
            __builder2.CloseElement();
            __builder2.AddMarkupContent(10, "\n");
#nullable restore
#line 225 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
            }

#line default
#line hidden
#nullable disable
            __builder2.AddContent(11, "        ");
            __builder2.CloseElement();
            __builder2.AddMarkupContent(12, "\n    ");
            __builder2.CloseElement();
        }
#nullable restore
#line 227 "C:\Users\Rishabh_Patil\source\repos\Blazor\Ellicium Packages\ellicium-blazor-master\ellicium-blazor-master\Ellicium.Blazor\Rendering\YearTimelineView.razor"
          );
        }
    }

    async Task OnListEventClick(AppointmentData data)
    {
        DialogService.Close();

        await OnAppointmentClick(data);
    }

    ElementReference view;
    DateTime CurrentDate;
    int CurrentMonth = -1;
    bool preventKeyPress = true;

    async Task OnKeyPress(KeyboardEventArgs args)
    {
        if(CurrentDate == default(DateTime))
        {
            CurrentDate = StartDate.AddDays(1);
        }

        var key = args.Code != null ? args.Code : args.Key;

        if (key == "ArrowLeft" || key == "ArrowRight")
        {
            var newDate = CurrentDate.AddDays(key == "ArrowLeft" ? -1 : 1);

            var firstDate = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
            var lastDate = new DateTime(CurrentDate.Year, CurrentDate.Month, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month));

            if(newDate < firstDate)
            {
                CurrentDate = firstDate;
            }
            else if(newDate > lastDate)
            {
                CurrentDate = lastDate;
            }
            else
            {
                CurrentDate = newDate;
            }

            await ScrollIntoView("rz-slot rz-state-focused");

            preventKeyPress = true;
        }
        else if (key == "ArrowUp" || key == "ArrowDown")
        {
            CurrentMonth = Math.Clamp(CurrentMonth + (key == "ArrowUp" ? -1 : 1), 0, 11);

            CurrentDate = new DateTime(CurrentDate.Year, CurrentMonth + 1, 1);

            await ScrollIntoView("rz-month rz-state-focused");

            preventKeyPress = true;
        }
        else if (key == "Enter")
        {
            await OnListClick(CurrentDate, AppointmentsInSlot(CurrentDate, CurrentDate.AddDays(1)));
#if NET5_0_OR_GREATER
            await view.FocusAsync();
#endif
            preventKeyPress = true;
        }
        else if (key == "Space")
        {
            var appointment = AppointmentsInSlot(CurrentDate, CurrentDate.AddDays(1)).FirstOrDefault();
            if (appointment != null)
            {
                await Scheduler.SelectAppointment(appointment);
#if NET5_0_OR_GREATER
                await view.FocusAsync();
#endif
            }

            preventKeyPress = true;
        }
        else
        {
            preventKeyPress = false;
        }
    }

    async Task ScrollIntoView(string cssClasses)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("Ellicium.scrollIntoViewIfNeeded", view, cssClasses);
        }
        catch
        { }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService DialogService { get; set; }
    }
}
#pragma warning restore 1591
