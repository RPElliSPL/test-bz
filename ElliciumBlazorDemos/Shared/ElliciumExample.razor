@using System.IO
@using Ellicium.Blazor
@implements IDisposable
@inject ExampleService ExampleService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@ExampleService.TitleFor(example)</PageTitle>
<HeadContent>
    <meta name="description" content="@ExampleService.DescriptionFor(example)">
    <meta name="author" content="Ellicium">
    <meta property="og:title" content="@ExampleService.TitleFor(example)" />
    <meta property="og:description" content="@ExampleService.DescriptionFor(example)" />
    <meta property="og:site_name" content="Ellicium Blazor Components">
    <meta property="og:image" content="https://blazor.Ellicium.com/images/Ellicium-og.png" />
    <meta property="twitter:card" content="summary_large_image" />
</HeadContent>
@if (Heading)
{
    <ElliciumText TextStyle="TextStyle.H2" TagName="TagName.H1" class="rz-pt-8">
        @Name
    </ElliciumText>
    <ElliciumText TextStyle="TextStyle.Subtitle1" TagName="TagName.P" class="rz-pb-4">
        Demonstration and configuration of the Ellicium Blazor <strong>@Name</strong> component.
    </ElliciumText>
}
<div class="documentation-links">
@if (Documentation)
{
    <a target="blank" href="@DocumentationHref" title=@($"Open {Name} documentation in new tab") ><ElliciumIcon Icon="launch" style="font-size: 1rem; margin-right: 4px;" /> @Name Docs</a>
}
@if (Heading)
{
    <a target="blank" href="@ComponentSourceHref" title=@($"View {Name} source code in new tab") ><ElliciumIcon Icon="launch" style="font-size: 1rem; margin-right: 4px;" /> @Name Source</a>
}
</div>
<ElliciumCard class="rz-p-0 rz-material-3-demo-card">
    <ElliciumTabs @bind-SelectedIndex="@selectedIndex" class="example-tabs">
        <Tabs>
            <ElliciumTabsItem Text="Example" Title="Example preview">
                @(dynamicContent ?? ChildContent)
            </ElliciumTabsItem>
            <ElliciumTabsItem Text="Edit Source" Title="View and edit example source code">
                <div class="source-tab-item rz-pb-2">
                    <CodeViewer ComponentName="@ComponentName" @bind-Value="@source" ComponentSource="@Source" PageName="@ExampleUrl" Compiled="OnCompiled" />
                </div>
            </ElliciumTabsItem>
            @foreach (var p in AdditionalSourceCodePages)
            {
            <ElliciumTabsItem Text="@Path.GetFileName(p)" Icon="code">
                <div class="source-tab-item rz-pb-2">
                    <CodeViewer PageName="@p" ReadOnly="true" />
                </div>
            </ElliciumTabsItem>
            }
        </Tabs>
    </ElliciumTabs>
</ElliciumCard>

@code {

    private int selectedIndex = 0;
}

@code {

    private RenderFragment dynamicContent;
}

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string ComponentName { get; set; }

    [Parameter]
    public string Source { get; set; }

    [Parameter]
    public string Example { get; set; }

    [Parameter]
    public string DocumentationLink { get; set; }

    [Parameter]
    public bool Heading { get; set; } = false;

    [Parameter]
    public bool Documentation { get; set; } = false;

    string DocumentationHref => Documentation ? DocumentationLink ?? $"/docs/guides/components/{Name?.ToLower()}.html" : "";

    string ComponentSourceHref => Source ?? $"https://github.com/Elliciumhq/Ellicium-blazor/blob/master/Ellicium.Blazor/Ellicium{Name}.razor.cs";

    [Parameter]
    public IEnumerable<string> AdditionalSourceCodePages { get; set; } = Enumerable.Empty<string>();

    private string ExampleUrl => string.IsNullOrEmpty(Example) ? $"{Name}Page.razor" : $"{Example}.razor";

    Example example;

    DateTime start;

    string source ;

    protected override void OnInitialized()
    {
        start = DateTime.Now;

        example = ExampleService.FindCurrent(NavigationManager.ToAbsoluteUri(NavigationManager.Uri));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"console.log('Page {Name} render time is {(DateTime.Now - start).TotalMilliseconds} ms')");
        }
    }

    void OnCompiled(Type type)
    {
        dynamicContent = builder =>
        {
            builder.OpenComponent(0, type);
            builder.CloseComponent();
        };

        selectedIndex = 0;
    }

    public void Dispose()
    {
        GC.Collect();
    }
}