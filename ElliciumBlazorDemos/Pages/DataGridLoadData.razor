@using System.Linq.Dynamic.Core
@using ElliciumBlazorDemos.Data
@using ElliciumBlazorDemos.Models.Northwind

@inherits DbContextPage

<ElliciumButton Text="Reset" Click="@Reset" Style="margin-bottom: 20px;" />
<ElliciumDataGrid style="height: 335px" @ref="grid" IsLoading=@isLoading Count="@count" Data="@employees" LoadData="@LoadData" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Employee" ColumnWidth="200px">
    <Columns>
        <ElliciumDataGridColumn TItem="Employee" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <ElliciumDataGridColumn TItem="Employee" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                <ElliciumImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
            </Template>
        </ElliciumDataGridColumn>
        <ElliciumDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Frozen="true" Width="160px"/>
        <ElliciumDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="160px"/>
        <ElliciumDataGridColumn TItem="Employee" Property="Title" Title="Job Title" 
            Type="typeof(IEnumerable<string>)" FilterValue="@selectedTitles" FilterOperator="FilterOperator.Contains" Width="200px">
            <FilterTemplate>
                <ElliciumDropDown @bind-Value=@selectedTitles Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select title" }})"
                    Change=@OnSelectedTitlesChange Data="@(titles)" AllowClear="true" Multiple="true" />
            </FilterTemplate>
        </ElliciumDataGridColumn>
        <ElliciumDataGridColumn TItem="Employee" Property="TitleOfCourtesy" Title="Title" Width="120px" />
        <ElliciumDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="HireDate" Title="Hire Date" FormatString="{0:d}" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="Address" Title="Address" Width="200px" />
        <ElliciumDataGridColumn TItem="Employee" Property="City" Title="City" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="Region" Title="Region" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="PostalCode" Title="Postal Code" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="Country" Title="Country" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="Extension" Title="Extension" Width="160px" />
        <ElliciumDataGridColumn TItem="Employee" Property="Notes" Title="Notes" Width="300px" />
    </Columns>
</ElliciumDataGrid>

<ElliciumCard class="mt-4">
    <ElliciumText TextStyle="TextStyle.H6" TagName="TagName.H2" class="mb-3">Perform custom data-binding</ElliciumText>
    <ElliciumText TextStyle="TextStyle.Body1">
        1. Set the Data and Count properties.
    </ElliciumText>
        <pre class="mt-3 p-3">
            <code>&lt;ElliciumDataGrid Count="@@count" Data="@@employees"</code>
        </pre>
    <ElliciumText TextStyle="TextStyle.Body1">
        2. Handle the LoadData event and update the Data and Count backing fields (<code>employees</code> and <code>count</code> in this case).
    </ElliciumText>
        <pre class="mt-3 p-3">
            <code>
void LoadData(LoadDataArgs args)
{
    var query = dbContext.Employees.AsQueryable();

    if (!string.IsNullOrEmpty(args.Filter))
    {
        query = query.Where(args.Filter);
    }

    if (!string.IsNullOrEmpty(args.OrderBy))
    {
        query = query.OrderBy(args.OrderBy);
    }

    count = query.Count();

    employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();


} 
            </code>
        </pre>
</ElliciumCard>
@code {
    ElliciumDataGrid<Employee> grid;
    int count;
    IEnumerable<Employee> employees;
    bool isLoading = false;

    List<string> titles = new List<string> {"Sales Representative", "Vice President, Sales", "Sales Manager", "Inside Sales Coordinator" };
    IEnumerable<string> selectedTitles;

    async Task OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;  
        }
        
        await grid.FirstPage();
    }

    async Task Reset()
    {
        grid.Reset(true); 
        await grid.FirstPage(true);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        // This demo is using https://dynamic-linq.net
        var query = dbContext.Employees.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of ElliciumDataGrid is set.
        count = query.Count();

        // Perform paging via Skip and Take.
        employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }
}
