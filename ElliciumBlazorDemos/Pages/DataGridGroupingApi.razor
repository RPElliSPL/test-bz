@using ElliciumBlazorDemos.Data
@using ElliciumBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inherits DbContextPage

<div style="display: flex; align-items: center; margin-bottom: 16px">
    <ElliciumCheckBox TValue="bool" @bind-Value="@showGroupExpandColumn" Name="showGroupExpandColumn" />
    <ElliciumLabel Text="Show group expand column" Component="showGroupExpandColumn" Style="margin-left: 8px; margin-right: 32px; vertical-align: middle;" />
    <ElliciumCheckBox TriState="true" TValue="bool?" @bind-Value="@allGroupsExpanded" Name="allGroupsExpanded" Change="@ToggleGroups" />
    <ElliciumLabel Text="All groups expanded by default" Component="allGroupsExpanded" Style="margin-left: 8px; margin-right: 32px; vertical-align: middle;" />
    <ElliciumButton Text="Expand all groups" Click="@(args => ToggleGroups(true))" style="margin-right: 16px" Disabled=@(allGroupsExpanded == true) />
    <ElliciumButton Text="Collapse all groups" Click="@(args => ToggleGroups(false))" Disabled=@(allGroupsExpanded == false) />
</div>
<ElliciumDataGrid @ref=grid AllowGrouping="true" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true" 
    Data="@employees" TItem="Employee" ColumnWidth="160px" LogicalFilterOperator="LogicalFilterOperator.Or" Render="@OnRender" 
        HideGroupedColumn="true" GroupRowRender="OnGroupRowRender" GroupRowExpand="OnGroupRowExpand" GroupRowCollapse="OnGroupRowCollapse" Group="@OnGroup"
        @bind-AllGroupsExpanded="@allGroupsExpanded" ShowGroupExpandColumn=@showGroupExpandColumn>
    <Columns>
        <ElliciumDataGridColumn TItem="Employee" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <ElliciumDataGridColumn TItem="Employee" Title="Photo" Sortable="false" Filterable="false" Frozen="true" Groupable="false" Width="80px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                <ElliciumImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
            </Template>
        </ElliciumDataGridColumn>
        <ElliciumDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" />
        <ElliciumDataGridColumn TItem="Employee" Property="LastName" Title="Last Name"/>
        <ElliciumDataGridColumn TItem="Employee" Property="Title" Title="Title" Width="200px" />
        <ElliciumDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" />
        <ElliciumDataGridColumn TItem="Employee" Property="HireDate" Title="Hire Date" FormatString="{0:d}" />
        <ElliciumDataGridColumn TItem="Employee" Property="Address" Title="Address" Width="200px" />
        <ElliciumDataGridColumn TItem="Employee" Property="City" Title="City" />
        <ElliciumDataGridColumn TItem="Employee" Property="Region" Title="Region" />
        <ElliciumDataGridColumn TItem="Employee" Property="PostalCode" Title="Postal Code" />
        <ElliciumDataGridColumn TItem="Employee" Property="Country" Title="Country" />
        <ElliciumDataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" />
        <ElliciumDataGridColumn TItem="Employee" Property="Extension" Title="Extension" />
        <ElliciumDataGridColumn TItem="Employee" Property="Notes" Title="Notes" Width="400px" />
    </Columns>
</ElliciumDataGrid>

<EventConsole @ref=@console />

@code {
    bool showGroupExpandColumn = true;
    bool? allGroupsExpanded;
    ElliciumDataGrid<Employee> grid;

    EventConsole console;
    IEnumerable<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employees = dbContext.Employees;
    }

    void OnRender(DataGridRenderEventArgs<Employee> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "Title", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    void ToggleGroups(bool? value)
    {
        allGroupsExpanded = value;
    }

    void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        if (args.FirstRender && args.Group.Data.Key == "Vice President, Sales" || allGroupsExpanded != null)
        {
            args.Expanded = allGroupsExpanded != null ? allGroupsExpanded : false;
        }
    }

    void OnGroupRowExpand(Group group)
    {
        console.Log($"Group row with key: {group.Data.Key} expanded");
    }

    void OnGroupRowCollapse(Group group)
    {
        console.Log($"Group row with key: {group.Data.Key} collapsed");
    }

    void OnGroup(DataGridColumnGroupEventArgs<Employee> args)
    {
        console.Log($"DataGrid {(args.GroupDescriptor != null ? "grouped" : "ungrouped")} by {args.Column.GetGroupProperty()}");
    }
}