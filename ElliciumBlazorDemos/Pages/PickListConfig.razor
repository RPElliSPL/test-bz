@using ElliciumBlazorDemos.Data
@using ElliciumBlazorDemos.Models.Northwind

@inherits DbContextPage
<ElliciumStack class="rz-p-0 rz-p-md-12">
    <ElliciumCard class="rz-p-4" Variant="Variant.Outlined">
        <ElliciumStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Orientation
                <ElliciumDropDown @bind-Value="@orientation" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "orientation" }})"
                            Data="@(Enum.GetValues(typeof(Orientation)).Cast<Orientation>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons JustifyContent
                <ElliciumDropDown @bind-Value="@justifyContent" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons justify content" }})"
                            Data="@(Enum.GetValues(typeof(JustifyContent)).Cast<JustifyContent>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons Style
                <ElliciumDropDown @bind-Value="@style" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons style" }})"
                            Data="@(Enum.GetValues(typeof(ButtonStyle)).Cast<ButtonStyle>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons Variant
                <ElliciumDropDown @bind-Value="@variant" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons variant" }})"
                            Data="@(Enum.GetValues(typeof(Variant)).Cast<Variant>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons Shade
                <ElliciumDropDown @bind-Value="@shade" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons shade" }})"
                            Data="@(Enum.GetValues(typeof(Shade)).Cast<Shade>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons Size
                <ElliciumDropDown @bind-Value="@size" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons size" }})"
                            Data="@(Enum.GetValues(typeof(ButtonSize)).Cast<ButtonSize>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Buttons Gap
                <ElliciumTextBox @bind-Value="@gap" aria-label="gap" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Allow filtering
                <ElliciumSwitch @bind-Value="@allowFilter" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "allow filtering" }})" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Multiple selection
                <ElliciumSwitch @bind-Value="@multiple" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enable multiple selection" }})" />
            </ElliciumStack>
            <ElliciumStack Orientation="Orientation.Vertical" Gap="4px">
                Show header
                <ElliciumSwitch @bind-Value="@showHeader" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "show header" }})" />
            </ElliciumStack>
        </ElliciumStack>
    </ElliciumCard>
    <ElliciumCard>
        <ElliciumPickList @bind-Source="@Source" @bind-Target="@Target" Style="height:500px; width:100%;" Orientation="@orientation"
            TextProperty="@nameof(Customer.CompanyName)" AllowFiltering="@allowFilter" Multiple="@multiple" ShowHeader="@showHeader"
            ButtonGap="@gap" ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant">
            <SourceHeader>
                Customers:
            </SourceHeader>
            <TargetHeader>
                Selected Customers:
            </TargetHeader>
            <Template>
                Company: @context.CompanyName
            </Template>
        </ElliciumPickList>
    </ElliciumCard>
</ElliciumStack>

@code {
    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = false;
    bool showHeader = true;

    IEnumerable<Customer> _source;
    IEnumerable<Customer> Source
    { 
        get
        {
            return _source;
        }
        set
        {
            if (_source != value)
            {
                _source = value;

                Console.WriteLine("Source updated");
            }
        }
    }

    IEnumerable<Customer> _target;
    IEnumerable<Customer> Target
    {
        get
        {
            return _target;
        }
        set
        {
            if (_target != value)
            {
                _target = value;

                Console.WriteLine("Target updated");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Source = dbContext.Customers;
    }
}