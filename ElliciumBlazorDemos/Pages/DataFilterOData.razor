@using ElliciumBlazorDemos.Data
@using ElliciumBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inject NorthwindODataService service

<ElliciumStack Gap="2rem">
    <ElliciumStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
        <ElliciumCheckBox @bind-Value="@auto" Name="auto" />
        <ElliciumLabel Text="Auto filter" Component="auto" Class="rz-me-6" />
        <ElliciumButton Text="Apply Filter" Click="@ApplyFilter" Disabled="@auto" Size="ButtonSize.Small" />
    </ElliciumStack>

    <ElliciumDataFilter @ref="dataFilter" Auto=auto Data="@orders" TItem="Order" ViewChanged=@(view => ordersGrid.Reload())>
        <Properties>
            <ElliciumDataFilterProperty TItem="Order" Property="OrderID" Title="Order ID" />
            <ElliciumDataFilterProperty TItem="Order" Property="Employee.LastName" Title="Employee Last Name" />
            <MyCustomEnumerableDataFilterProperty TItem="Order" Property="Employee.Title" Title="Employee Title" FilterValue="@finalSelectedTitles"
                                                    Type="typeof(IEnumerable<string>)" FilterOperator="FilterOperator.Contains">
                <FilterTemplate>
                    <ElliciumDropDown @bind-Value=@selectedTitles Style="width:100%;"
                                    Change=@OnSelectedTitlesChange Data="@(titles)" AllowClear="true" Multiple="true" />
                </FilterTemplate>
            </MyCustomEnumerableDataFilterProperty>
            <MyCustomDataFilterProperty TItem="Order" Property="OrderDate" Title="Order Date" />
            <ElliciumDataFilterProperty TItem="Order" Property="Freight" Title="Freight" />
        </Properties>
    </ElliciumDataFilter>

    <ElliciumDataGrid @ref="ordersGrid" AllowPaging="true" AllowSorting="true" IsLoading="@isLoading"
                    Data="@(filteredOrders)" TItem="Order" Count="@count" LoadData="@LoadData"
                    ColumnWidth="200px" PageSize="20" Style="height: 500px">
        <Columns>
            <ElliciumDataGridColumn Width="200px" TItem="Order" Property="OrderID" Title="Order ID" />
            <ElliciumDataGridColumn Width="200px" TItem="Order" Property="Customer.CompanyName" Title="Customer" />
            <ElliciumDataGridColumn TItem="Order" Property="Employee.LastName" Title="Employee">
                <Template Context="order">
                    @order.Employee?.FirstName @order.Employee?.LastName
                </Template>
            </ElliciumDataGridColumn>
            <ElliciumDataGridColumn TItem="Order" Property="Employee.Title" Title="Employee Title" />
            <ElliciumDataGridColumn TItem="Order" Property="OrderDate" Title="Order Date" FormatString="{0:d}">
            </ElliciumDataGridColumn>
            <ElliciumDataGridColumn TItem="Order" Property="Freight" Title="Freight">
                <Template Context="order">
                    @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)
                </Template>
            </ElliciumDataGridColumn>
            <ElliciumDataGridColumn TItem="Order" Property="ShipName" Title="Ship Name" />
        </Columns>
    </ElliciumDataGrid>
</ElliciumStack>

@code {
    bool auto = true;
    ElliciumDataFilter<Order> dataFilter;

    IEnumerable<Order> filteredOrders;
    IEnumerable<Order> orders;
    ElliciumDataGrid<Order> ordersGrid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orders = Enumerable.Empty<Order>();
    }

    List<string> titles = new List<string> { "Sales Representative", "Vice President, Sales", "Sales Manager", "Inside Sales Coordinator" };
    IEnumerable<string> selectedTitles;
    IEnumerable<string> finalSelectedTitles;

    async Task OnSelectedTitlesChange(object value)
    {
        if (selectedTitles != null && !selectedTitles.Any())
        {
            selectedTitles = null;
        }

        if (auto)
        {
            finalSelectedTitles = selectedTitles;
        }

        await ordersGrid.FirstPage();
    }

    async Task ApplyFilter()
    {
        finalSelectedTitles = selectedTitles;
        await dataFilter.Filter();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await dataFilter.AddFilter(new CompositeFilterDescriptor() 
            { 
                Property = "Employee.LastName", 
                FilterValue = "Buchanan", 
                FilterOperator = FilterOperator.Contains 
            });
        }
    }

    bool isLoading;
    int count;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var filter = args.Filter;
        if (dataFilter.Filters.Any())
        {
            filter = !string.IsNullOrEmpty(filter) ?
                $"({dataFilter.ToODataFilterString()}) and ({filter})" : dataFilter.ToODataFilterString();
        }

        var result = await service.GetOrders(filter: filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, expand: "Customer,Employee", count: true);
        // Update the Data property
        filteredOrders = result.Value.AsODataEnumerable();
        // Update the count
        count = result.Count;

        isLoading = false;
    }
}